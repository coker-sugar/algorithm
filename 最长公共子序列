1143. 最长公共子序列
已解答
中等
相关标签
相关企业
提示
给定两个字符串 text1 和 text2，返回这两个字符串的最长 公共子序列 的长度。如果不存在 公共子序列 ，返回 0 。

一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。

例如，"ace" 是 "abcde" 的子序列，但 "aec" 不是 "abcde" 的子序列。
两个字符串的 公共子序列 是这两个字符串所共同拥有的子序列。

示例 1：

输入：text1 = "abcde", text2 = "ace" 
输出：3  
解释：最长公共子序列是 "ace" ，它的长度为 3 。
示例 2：

输入：text1 = "abc", text2 = "abc"
输出：3
解释：最长公共子序列是 "abc" ，它的长度为 3 。
示例 3：

输入：text1 = "abc", text2 = "def"
输出：0
解释：两个字符串没有公共子序列，返回 0 。


class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        // 首先定义一个二维数组dp存储公共子序列的长度，第dp[m][n]个就是最大长度(一个二维数组的斜边右下角的数是最大长度)
        // 当i=0或者j=0的时候，是没有公共子序列的，所以dp第一行和第一列的值都为0
        // 接着从1到m遍历text1并拿到text[i]的值a，从1到n遍历text2并拿到text[j]的值b
        // 比较a和b的值，如果相等，那么dp[i][j]=dp[i-1][j-1]+1
        // 如果不相等，那么dp[i][j]是dp[i-1][j]和dp[i][j-1]中的最大值
        // 返回dp[m][n]

        // 拿到两个字符串的长度
        int len1 = text1.length(),len2 = text2.length();
        // 定义一个长度为m+1，n+1的二维数组
        int[][] dp = new int[len1 + 1][len2 + 1];
        // 从1开始遍历到m
        for(int i = 1;i <= len1;i ++) {
            // 拿到i-1的字符
            char m = text1.charAt(i - 1);
            // 从1开始遍历n
            for(int j = 1;j <= len2;j ++) {
                // 拿到j-1的字符
                char n = text2.charAt(j - 1);
                // 如果两个字符相等
                if(m == n) {
                    // 二维数组的i，j处等于i-1，j-1加一
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else { // 否则
                    // 二维数组的i，j处为i-1，j和i，j-1中最大值相等
                    dp[i][j] = Math.max(dp[i - 1][j],dp[i][j - 1]);
                }
            }
        }
        // 返回二维数组m，n
        return dp[len1][len2];
    }
}
