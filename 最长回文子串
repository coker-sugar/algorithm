5. 最长回文子串
已解答
中等
相关标签
相关企业
提示
给你一个字符串 s，找到 s 中最长的回文子串。

如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。

 

示例 1：

输入：s = "babad"
输出："bab"
解释："aba" 同样是符合题意的答案。
示例 2：

输入：s = "cbbd"
输出："bb"
 

提示：

1 <= s.length <= 1000
s 仅由数字和英文字母组成

一、遍历字符串，到当前索引时
二、找到左边所有和它相邻且相等的字符；找到右边所有和它相邻且相等的字符，len ++
三、找到它 左右两边所有一次相等的字符，len +=2
四、如果len大于最大回文子串的长度，len就替换该长度，并记录最大回文子串的起始值 left

如此循环，直到找到最大的回文子串

class Solution {
    public String longestPalindrome(String s) {
        // 如果字符串是空或者字符串长度小于2，返回s
        if(s == null || s.length() < 2) return s;
        // 定义字符串长度，左右索引，长度初始化为1，最大长度为0，最大长度的起始值0
        int slen = s.length(),left = 0,right = 0,len = 1,maxlen = 0,maxstart = 0;
        // 开始从头遍历字符串s
        for(int i = 0;i < slen;i ++) {
        // 左索引是当前索引的前一位，右索引是当前索引的后一位  
        left = i - 1;right = i + 1;
        // 只要左边索引大等于0，并且左边索引和当前索引相等，长度就加一，左边索引减一
        while(left >= 0 && s.charAt(left) == s.charAt(i)) {
            len ++;
            left --;
        }
        // 只要右边索引小于s长度，并且右边索引和当前索引的值相等，长度加一，右边索引加一
        while(right < slen && s.charAt(i) == s.charAt(right)) {
            len ++;
            right ++;
        }
        // 上述是去除最长子串中有重复的值的问题，现在要进行判断左右是否相等的问题
        // 只要左边索引大于等于0，并且右边索引小于s长度，左右边索引值相等，长度+=2，左边--，右边++
        while(left >= 0 && right < slen && s.charAt(left) == s.charAt(right)) {
            len += 2;
            left --;
            right ++;
        }
        // 只要长度大于了最大的长度，最大长度就会换成长度len，最大长度的起始值换成了左索引
        if(maxlen < len) {
            maxlen = len;
            maxstart = left;
        }
        // 此时遍历结束，要给长度len重置为1
        len = 1;
        }
        // 返回最长子串 s.substring(maxs + 1, maxs + maxl + 1)
        return s.substring(maxstart + 1,maxstart + maxlen + 1);
    }
}

利用一个二维数组bool进行记录之前的字符串是否为回文子串

r从1到slen遍历，l在里面从0到r遍历
只要发现l和r相等，并且l到r的距离在3以内 || 或者在bool[l+1][r-1]为true，即前一个字符串为回文串
  那么就把当前bool[l][r]置为1
  同时判断最大长度，修改起始值和终点值
最后返回最长回文子串
注意substring包头不包尾

class Solution {
    public String longestPalindrome(String s) {
        // 如果字符串为空，或者字符串长度小于2就返回s
        if(s == null || s.length() < 2) return s;
        // 定义字符串的长度，最大回文子串的起点和终点，长度len
        int slen = s.length(),maxlen = 1,start = 0,end = 0;
        // 新定义一个boolean类型的二维数组，动态规划：空间换时间
        boolean[][] bool = new boolean[slen][slen];
        // 定义r从1遍历到字符串末尾
        for(int r = 1;r < slen;r ++) {
            // 定义l从0遍历到r之前
            for(int l = 0;l < r;l ++) {
                // 如果发现l和r相等，并且 l到r的距离小等于3（就仅仅是左右两个，有一个中间值） 或者 二维数组的[l + 1][r - 1]为true（l，r之间的字符串是回文字符串）
                if(s.charAt(l) == s.charAt(r) && (r-l+1 <= 3 || bool[l + 1][r - 1]))
                {
                    // [l][r]置为true
                    bool[l][r] = true;
                    // 如果l到r的距离（注意这里要加一）大于最大长度
                    if(r-l+1 > maxlen) {
                        // 最大长度改为l到r的距离
                        maxlen = r-l+1;
                        // 起始点为l，终点为r
                        start = l;
                        end = r;
                    }
                }
            }
        }
        // 最后返回回文子串 s.substring(start,end + 1) // 包头不包尾
        return s.substring(start,end + 1);
    }
}
