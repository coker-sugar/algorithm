136. 只出现一次的数字
已解答
简单
相关标签
相关企业
给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。

你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。

示例 1 ：

输入：nums = [2,2,1]
输出：1
示例 2 ：

输入：nums = [4,1,2,1,2]
输出：4
示例 3 ：

输入：nums = [1]
输出：1


一、使用hashmap表
注意：
1.构造hashmap ： HashMap<Integer,Integer> hash = new HashMap<>()
2.hash中是否有值：hash.containsKey(nums[i])
3.hash中存入值：hash.put(nums[i],count)
4.hash中修改值：hash.replace(nums[i],count)
5.遍历hash： for(Integer id : hash.keySet())
6.获取值：hash.get(id)

class Solution {
    public int singleNumber(int[] nums) {
        if(nums.length == 1) return nums[0];
        HashMap<Integer,Integer> hashmap = new HashMap<>();
        for(int i = 0; i < nums.length; i ++) {
            if(!hashmap.containsKey(nums[i])) {
                hashmap.put(nums[i],1);
            } else {
                int temp = hashmap.get(nums[i]);
                ++temp;
                hashmap.replace(nums[i],temp);
            }
        }
        for(Integer id: hashmap.keySet()) {
            if(hashmap.get(id) == 1) return id;
        }
        return 0;
    }
}

别人的hashmap解法
class Solution {
    public int singleNumber(int[] nums) {
        int res = nums[0];
        HashMap<Integer,Integer> map = new HashMap<>();
        for(Integer i : nums) {
            Integer count = map.get(i);
            count = count == null ? 1 : ++count ;
            map.put(i,count);
        }
        for(Integer id: map.keySet()) {
            int c = map.get(id);
            if(c == 1) return id;
        }
        return res;
    }
}

二、快排
class Solution {
    public int singleNumber(int[] nums) {
        if(nums.length == 1) return nums[0];
        int temp = -1,count = 0;
        Arrays.sort(nums);
        for(int i = 0;i < nums.length;i ++) {
            if(temp != nums[i]) {
                if(count == 1) return temp;
                temp = nums[i];
                count = 1;
            } else {
                count ++;
            }
        }
        return temp;
    }
}

三、异或
class Solution {
    public int singleNumber(int[] nums) {
        int res = nums[0];
        if(nums.length > 1) {
            for(int i = 1;i < nums.length;i ++) {
                // 异或的效果，重复双次数的结果为0
                res = res ^ nums[i];
            }
        }
        return res;
    }
}



