207. 课程表
已解答
中等
相关标签
相关企业
提示
你这个学期必须选修 numCourses 门课程，记为 0 到 numCourses - 1 。

在选修某些课程之前需要一些先修课程。 先修课程按数组 prerequisites 给出，其中 prerequisites[i] = [ai, bi] ，表示如果要学习课程 ai 则 必须 先学习课程  bi 。

例如，先修课程对 [0, 1] 表示：想要学习课程 0 ，你需要先完成课程 1 。
请你判断是否可能完成所有课程的学习？如果可以，返回 true ；否则，返回 false 。

示例 1：

输入：numCourses = 2, prerequisites = [[1,0]]
输出：true
解释：总共有 2 门课程。学习课程 1 之前，你需要完成课程 0 。这是可能的。
示例 2：

输入：numCourses = 2, prerequisites = [[1,0],[0,1]]
输出：false
解释：总共有 2 门课程。学习课程 1 之前，你需要先完成​课程 0 ；并且学习课程 0 之前，你还应先完成课程 1 。这是不可能的。


class Solution {
    // 存储每个数组
    List<List<Integer>> edges;
    // 定义一个访问状态的数组
    int[] visited;
    // 定义 valid返回结果，初始为true
    boolean valid = true;
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        edges =  new ArrayList<List<Integer>>();
        for(int i = 0;i < numCourses;i ++) {
            edges.add(new ArrayList<Integer>()); // 给第一个list处都声明上空的list方便之后存入数据
        }
        visited = new int[numCourses];  // 定义访问状态数组
        for(int[] info : prerequisites) {
            edges.get(info[1]).add(info[0]); // 遍历二维数组，给先提条件[1]加入 [0]
        }
        for(int i = 0;i < numCourses && valid;i ++) { // 遍历每个值，且要求valid不为false，如果还没有搜索过，就dfs搜索
            if(visited[i] == 0) dfs(i);
        }
        return valid;// 返回结果valid
    }
    // 定义dfs函数，参数为u
    public void dfs(int u) {
        visited[u] = 1;// 已经搜索过
        for(int v:edges.get(u)) { // 遍历边，拿到u的所有下一个节点
            if(visited[v] == 0) { // 如果visited为0，没有搜索过，就再次搜索，如果valid为false就终止搜索
                dfs(v);
                if(!valid) return;
            } else if(visited[v] == 1) { // 如果visited为1，说明，冲突了，valid为false，返回
                valid = false;
                return;
            }
        }
        visited[u] = 2; // 遍历完毕，没有下一个节点了，visited为2
    }
}
