给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。

输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]
输出：6
解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 
示例 2：

输入：height = [4,2,0,3,2,5]
输出：9

// 2023年10月29日
class Solution {

    public int trap(int[] height) {
        int sum = 0;
        int len = height.length;
        int[] maxleft = new int[len];
        int[] maxright = new int[len];
        // 存最大数组时出错,既然是当前数的前面一个值，那么就应该比较的是当前索引的前面的值
        for(int i = 1;i < len - 1;i ++) {
            maxleft[i] = Math.max(maxleft[i - 1],height[i - 1]);
        }
        // 既然是当前数的后面一个值，那么就应该比较的是当前索引的后面的值
        for(int i = len - 2;i >= 0;i --) {
            maxright[i] = Math.max(maxright[i + 1],height[i + 1]);
        }
        for(int i = 1;i < len -1;i ++) {
            int min = maxleft[i] > maxright[i] ? maxright[i] : maxleft[i];
            if(min > height[i]) {
                sum += min - height[i];
            }
        }
        return sum;
    }
}

// 左右指针
class Solution {
    public int trap(int[] height) {
        int sum = 0;
        int maxleft = 0,maxright =0;
        // 定义左右指针时，要给左右指针预留一个位置，用作何前一个或后一个做比较
        int left = 1,right = height.length - 2;
        // 最左右端不计入池子
        for(int i = 1;i < height.length - 1;i ++) {
            // 从左到右变更
            if(height[left - 1] <= height[right + 1]) {
                maxleft = Math.max(maxleft,height[left - 1]);
                if(maxleft > height[left]) {
                    sum += maxleft - height[left];
                }
                left ++;
            }
            // 从右到左变更
            else {
                maxright = Math.max(maxright,height[right + 1]);
                if(maxright > height[right]) {
                    sum += maxright - height[right];
                }
                right --;
            }
        }
        return sum;
    }
}


// 2023年10月26日

class Solution {
    public int trap(int[] height) {
        // 错误方法：
        // 1、如果右边的高，那就算左边到右边的所有能接水的面积（height[左边]-height[i]）
        // 2、如果左边的高，并且右边的高于右边后面一个的高度，那么就算左边到右边的所有能接水的面积（height[右边]-height[i]）；否则右边就++
        // 3、没有考虑到，这个池子是连续性的，即使出现第2种情况，此时右边的高柱子记为I，但是后面可能还会有比I高的柱子，这就会导致少算一部分的面积，最终结果偏小。
        int sum = 0;
        int len = height.length;
        int left = 0;
        int right = left + 1;
        while(right < len && left < right) {
            // 右边的高
            if(height[right] >= height[left]) {
                for(int i = left + 1;i < right; i ++) {
                    sum += (height[left] - height[i]);   
                }
                left = right;
                right = left + 1;
                if(right >= len) break;
            } 
            // 左边的高
            else if(height[right] < height[left]) {
                if(right+1 <len && height[right+1] < height[right]) {
                    for(int i = left + 1;i < right; i ++) {
                        sum += (height[right] - height[i]);   
                    }
                    left = right;
                    right = left + 1;
                     if(right >= len) break;
                } else {
                    right ++;
                     if(right >= len) break;
                }
            }
        }
        return sum;
    }
}

class Solution {
    public int trap(int[] height) {
        // 正确方法一：按照行来，一层一层的向上添加，初始值为sum=0。当当前高度小于当前层次&&左右两边高度大等于当前层次，就sum+=1.
        int sum = 0;
        int max = getMax(height);//找到最大的高度，以便遍历。
        for (int i = 1; i <= max; i++) {
            boolean isStart = false; //标记是否开始更新 temp
            int temp_sum = 0;
            for (int j = 0; j < height.length; j++) {
            if (isStart && height[j] < i) {
                temp_sum++;
            }
            if (height[j] >= i) {
                sum = sum + temp_sum;
                temp_sum = 0;
                isStart = true;
            }
        }
    }
    return sum;
    }
    private int getMax(int[] height) {
		int max = 0;
		for (int i = 0; i < height.length; i++) {
			if (height[i] > max) {
				max = height[i];
			}
		}
	return max;
    }
}

class Solution {
    public int trap(int[] height) {
    // 方法二：找出当前列的左端最高和右端最高，得到左右端最高值较小的值minHeight，如果当前列的高度小于minHeight，那么就sum+=(minHeight-height[i])
    int sum = 0;
    //最两端的列不用考虑，因为一定不会有水。所以下标从 1 到 length - 2
    for (int i = 1; i < height.length - 1; i++) {
        int max_left = 0;
        //找出左边最高
        for (int j = i - 1; j >= 0; j--) {
            if (height[j] > max_left) {
                max_left = height[j];
            }
        }
        int max_right = 0;
        //找出右边最高
        for (int j = i + 1; j < height.length; j++) {
            if (height[j] > max_right) {
                max_right = height[j];
            }
        }
        //找出两端较小的
        int min = Math.min(max_left, max_right);
        //只有较小的一段大于当前列的高度才会有水，其他情况不会有水
        if (min > height[i]) {
            sum = sum + (min - height[i]);
        }
    }
    return sum;
    }
}


class Solution {
    public int trap(int[] height) {
    // 方法三：利用数组求得当前列的左右端最大值，当前值的左端最大值为（max(当前值的前一个值，前一个值的左端最大值)），当前值的右端最大值为（max(当前值的后一个值，后一个值的右端最大值)），避免了再次for循环
    // 定义sum
    int sum = 0;
    // 定义左端最值数组
    int[] maxleft = new int[height.length];
    // 定义右端最值数组
    int[] maxright = new int[height.length];
    // 遍历找到当前值最左端的最值，加入左端数组
    for(int i = 1;i<height.length-1;i++) {
        maxleft[i] = Math.max(height[i-1],maxleft[i-1]);
    }
    // 遍历找到当前值最右端的最值，加入右端数组
    for(int i = height.length-2; i >= 0; i --) {
        maxright[i] = Math.max(maxright[i+1],height[i+1]);
    }
    // 遍历数组，从1开始，到末尾的前一个结束，最左右端不计入池子
    for(int i = 1;i < height.length - 1;i ++) {
        // 找到左右端最小值
        int minHeight = Math.min(maxleft[i],maxright[i]);
        // 若最小值>当前高度，sum+=min-height[i]
        if(minHeight > height[i]) {
            sum += minHeight - height[i];
        }
    }
    // 返回sum
    return sum;
    }
}

class Solution {
    public int trap(int[] height) {
    // 方法四:因为左右端最值只用了一次,所以无需专门耗时间来记录数组,可以利用左右指针逐次遍历
    // 定义sum
    int sum = 0;
    // 定义左端最值
    int maxleft = 0;
    // 定义右端最值
    int maxright =0;
    // 左指针
    int left = 1;
    // 右指针
    int right = height.length - 2;
    // 遍历数组，从1开始，到末尾的前一个结束，最左右端不计入池子
    for(int i = 1;i < height.length - 1;i ++) {
        // 从左到右变更
        if(height[left-1] < height[right+1]) {
            maxleft = Math.max(maxleft,height[left - 1]);
            int minHeight = maxleft;
            if(minHeight > height[left]) {
                sum += minHeight - height[left];
            }
            left ++;
        }
        // 从右到左变更
        else {
            maxright = Math.max(maxright,height[right + 1]);
            int minHeight = maxright;
            if(minHeight > height[right]) {
                sum += minHeight - height[right];
            }
            right --;
        }
    }
    // 返回sum
    return sum;
    }
}


















