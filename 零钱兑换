322. 零钱兑换
已解答
中等
相关标签
相关企业
给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。

计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回 -1 。

你可以认为每种硬币的数量是无限的。

 

示例 1：

输入：coins = [1, 2, 5], amount = 11
输出：3 
解释：11 = 5 + 5 + 1
示例 2：

输入：coins = [2], amount = 3
输出：-1
示例 3：

输入：coins = [1], amount = 0
输出：0


class Solution {
    public int coinChange(int[] coins, int amount) {
        // 这里的dp[k] 和 dp[k-1]及以前的数组值 关系为:（这里的k存储的应当是amount这一具体数量）
            // dp[k]中的k 减去 coins 中的某一个值coins[i]，即可和dp[k - coins[i]]这一值挂钩，并且要+1
            // 因为此时的dp[k]是要比dp[k - coins[i]]值多了一个coins[i]
            // 然后取dp[i]和dp[k - coins[i]]+1中较小的那一个数值

        // 定义一个数组dp，所有值初始化为amount+1
        int max = amount + 1;
        int[] dp = new int[max];
        Arrays.fill(dp,max);
        // 使得dp[0]为0
        dp[0] = 0;
        // 从1到amount遍历，找背包前面怎么防的i
        for(int i = 1;i <= amount;i ++) {
            // 遍历硬币数组j
            for(int j = 0;j < coins.length;j ++) {
                // 若硬币小等于当前值
                if(coins[j] <= i) {
                    // 使得dp[i] 取 dp[i]本身 或  当前值-硬币的值并+1 的最小值
                    dp[i] = Math.min(dp[i],dp[i - coins[j]]+1);
                }
            }
        }
        // 返回dp[amount],如果仍然大于amount返回-1，反则返回本身
        return dp[amount] > amount ? -1 : dp[amount];
    }
}

class Solution {
    public int coinChange(int[] coins, int amount) {
        // 始终没有能考虑到 amount - 会跳过coins[i] 会跳过coins 中的某一个值，去减它的下一个值
        // 所以这也就是为什么要求使用 dp数组的 原因
        Arrays.sort(coins);
        if(amount == 0) return 0;
        int count = 0,temp = 0,len = coins.length,am = amount;
        for(int j = len - 1;j >= 0;j --) {
            for(int i = j;i >= 0;i --) {
                if(coins[i] > am) continue;
                while(am > 0) {
                    temp = am;
                    am -= coins[i];
                    count ++;
                }
                if(am == 0) return count;
                else if(am < 0) {
                    am = temp;
                    count--;
                }
            }   
            am = amount;
        }
        if(am > 0) return -1;
        return count;
    }
}
