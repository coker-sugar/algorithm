198. 打家劫舍
已解答
中等
相关标签
相关企业
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

示例 1
输入：[1,2,3,1]
输出：4
解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。
示例 2：

输入：[2,7,9,3,1]
输出：12
解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。


  class Solution {
    public int rob(int[] nums) {
    // 动态优化的解法：
        // 1.找到子问题，f(n) 由 f(n-1),f(n-2) 决定
        // 2.找到子问题的递推关系，f(k)：如果不偷k房间，那么就由f(k-1)决定，如果偷了k房间，那么就由f(k) + f(k - 2)决定
        // 3.确定dp数组的计算顺序，因为f(n) 由 f(n-1),f(n-2) 决定，很容易发现是从左到右遍历的顺序
        int leng = nums.length;
        // 定义一个leng+1的数组，第dp[i]个就是长度为i的子问题中最大值
        int[] dp = new int[leng + 1];
        // 首先当k为0的时候，结果为0，k为1的时候，结果为nums[1]
        dp[0] = 0;
        dp[1] = nums[0];
        // 从2开始往后遍历
        for(int i = 2;i <= leng; i++) {
            // 当前值由要么是前面一个值，也就是当前值不算；要么就是前面的前面一个值，当前值算
            dp[i] = Math.max(dp[i - 1],nums[i - 1] + dp[i - 2]);
        }
        return dp[leng];
    }
}
