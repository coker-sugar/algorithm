给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。

找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。

返回容器可以储存的最大水量。

说明：你不能倾斜容器。

示例 1：
输入：[1,8,6,2,5,4,8,3,7]
输出：49 
解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。

示例 2：
输入：height = [1,1]
输出：1

/**
 * @param {number[]} height
 * @return {number}
 */
var maxArea = function(height) {
    // 方法一：暴力解法（超时）
    let max = 0;
    let min = 0;
    for(let i = 0;i < height.length - 1; i ++) {
        for(let j = i + 1;j < height.length; j ++) {
            min = Math.min(height[i],height[j]);
            let area = (j - i) * min;
            max = Math.max(max,area);
        }
    }
    return max;
   
    // 这里为什么能用双指针？ 因为可以有选择的进行移动左边指针还是右边指针，选择条件就是：哪边的高度低，就移动哪边。
    // 双指针是有选择条件的
    // 方法二：双指针
    let maxArea = 0;
    let left = 0;
    let right = height.length - 1;
    while(left !== right) {
        let minHeight = Math.min(height[left],height[right]);
        maxArea = Math.max(maxArea,((right-left)*minHeight));
        if(minHeight === height[left]) {
            left ++;
        }else {
            right --;
        }
    }
    return maxArea;
    // 方法二：进阶版
    let maxArea = 0;
    for(let l = 0, r = height.length-1; l < r; ) {
        let minHeight = Math.min(height[l],height[r]);
        maxArea = Math.max(maxArea,minHeight*(r - l));
        height[l] < height[r] ? l ++ : r --;
    }
    return maxArea;
};
