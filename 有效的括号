20. 有效的括号
已解答
简单
相关标签
相关企业
提示
给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。

有效字符串需满足：

左括号必须用相同类型的右括号闭合。
左括号必须以正确的顺序闭合。
每个右括号都有一个对应的相同类型的左括号。
 
示例 1：

输入：s = "()"
输出：true
示例 2：

输入：s = "()[]{}"
输出：true
示例 3：

输入：s = "(]"
输出：false

/**
 * @param {string} s
 * @return {boolean}
 */
var isValid = function(s) {
    const stack = []
    const map = {
        '(':')',
        '[':']',
        '{':'}'
    }

    for(let i = 0;i < s.length;i ++) {
        const c = s[i];
        // 若符号输入左半边，压入栈中
        if(map[c]) {
            stack.push(c)
        } else { // 符号在右半边
            const top = stack.pop()
            if(map[top] != c) return false // 若栈顶的第一个值和符号不等，返回false
        }
    }
    return stack.length === 0
};


class Solution {
    public boolean isValid(String s) {
        // 定义一个栈
        // 遍历s字符串
            // 若是'('，压入')'
            // 若是'{',压入'}'
            // 若是'[',压入']'
            // 若栈为空 || 出栈的栈顶元素和当前元素不相等——>返回false
        // 返回 栈是否为空
        Stack<Character> stack = new Stack<Character>();
        for(char c:s.toCharArray()) {
            if(c == '(') stack.push(')');
            else if(c == '{') stack.push('}');
            else if(c == '[') stack.push(']');
            // 这里判断stack为空的时候，说明栈底没有任何左半边的值，来的是右半边的值，开始就匹配错误
            else if(stack.empty() || c != stack.pop()) return false;
        }
        return stack.empty();
    }
}
