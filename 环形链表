141. 环形链表
已解答
简单
相关标签
相关企业
给你一个链表的头节点 head ，判断链表中是否有环。

如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：pos 不作为参数进行传递 。仅仅是为了标识链表的实际情况。

如果链表中存在环 ，则返回 true 。 否则，返回 false 。

 

示例 1：

输入：head = [3,2,0,-4], pos = 1
输出：true
解释：链表中有一个环，其尾部连接到第二个节点。
  
public class Solution {
    public boolean hasCycle(ListNode head) {
        // 将ListNode节点放入Hash表中
        HashSet<ListNode> hash = new HashSet<ListNode>();
        while(head != null) {
            if(!hash.add(head)) return true; // 如果添加节点到hash表中时返回false，证明hash表中已经有了该节点，即进入了循环链表中了
            head = head.next;
        }
        return false;
    }
}

// 利用快慢指针 快指针向前移动两次，慢指针向前移动一次，当快慢指针相等时说明已经进入了环形中，快指针已经转了两圈，慢指针转了一圈
public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        while(fast != null) {
            fast = fast.next;
            if(fast != null) {
                fast = fast.next;
            }
            if(fast == slow) {
                return true;
            }
            slow = slow.next;
        }
        return false;
    }
}
