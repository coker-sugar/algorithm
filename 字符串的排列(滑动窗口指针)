567. 字符串的排列
提示
中等
967
相关企业
给你两个字符串 s1 和 s2 ，写一个函数来判断 s2 是否包含 s1 的排列。如果是，返回 true ；否则，返回 false 。
换句话说，s1 的排列之一是 s2 的 子串 。

示例 1：
输入：s1 = "ab" s2 = "eidbaooo"
输出：true
解释：s2 包含 s1 的排列之一 ("ba").


示例 2：
输入：s1= "ab" s2 = "eidboaoo"
输出：false

// java语言
class Solution {
    public boolean checkInclusion(String s1, String s2) {
        // 这道题和异位词那道题很像,那道题是找到有匹配的就把 异位词索引 添加到数组中
        int s1len = s1.length();
        int s2len = s2.length();
        if(s1len > s2len) return false;
        // boolean IsChild = false;
        int[] s1Count = new int[26];
        int[] s2Count = new int[26];
        for(int i = 0;i < s1len;i ++) {
            s1Count[s1.charAt(i) - 'a'] ++;
            s2Count[s2.charAt(i) - 'a'] ++;
        }
        if(Arrays.equals(s1Count,s2Count)) return true;
        for(int i = 0;i < s2len - s1len;i ++) {
            s2Count[s2.charAt(i) - 'a'] --;
            s2Count[s2.charAt(i + s1len) - 'a'] ++;

            if(Arrays.equals(s1Count,s2Count)) return true;
        }
        return false;
    }
}


// c语言
bool checkInclusion(char * s1, char * s2){

    int n = strlen(s1), m = strlen(s2);
    if (n > m) {
        return false;
    }
    int cnt[26];
    memset(cnt, 0, sizeof(cnt));
    for (int i = 0; i < n; ++i) {
        --cnt[s1[i] - 'a'];
    }
    int left = 0;
    for (int right = 0; right < m; ++right) {
        int x = s2[right] - 'a';
        ++cnt[x];
        while (cnt[x] > 0) {
            --cnt[s2[left] - 'a'];
            ++left;
        }
        if (right - left + 1 == n) {
            return true;
        }
    }
    return false;
}
