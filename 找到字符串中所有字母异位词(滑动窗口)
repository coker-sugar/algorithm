438. 找到字符串中所有字母异位词
中等
1.3K
相关企业
给定两个字符串 s 和 p，找到 s 中所有 p 的 异位词 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。

异位词 指由相同字母重排列形成的字符串（包括相同的字符串）。

示例 1:
输入: s = "cbaebabacd", p = "abc"
输出: [0,6]
解释:
起始索引等于 0 的子串是 "cba", 它是 "abc" 的异位词。
起始索引等于 6 的子串是 "bac", 它是 "abc" 的异位词。

 示例 2:
输入: s = "abab", p = "ab"
输出: [0,1,2]
解释:
起始索引等于 0 的子串是 "ab", 它是 "ab" 的异位词。
起始索引等于 1 的子串是 "ba", 它是 "ab" 的异位词。
起始索引等于 2 的子串是 "ab", 它是 "ab" 的异位词。


class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        // 拿到s和p的长度
        int slen = s.length();
        int plen = p.length();
        // 若p长度大于s长度,返回空数组
        if(plen > slen) return new ArrayList<Integer>();
        // 定义数组ans
        List<Integer> ans = new ArrayList<Integer>();
        // 定义空间为26位空间的数组Scount和Pcount
        int[] sCount = new int[26];
        int[] pCount = new int[26];
        // 遍历p字符串
        for(int i = 0;i < plen;i ++) {
            // 记录pcount的指定位置的字符出现次数
            pCount[p.charAt(i) - 'a'] ++;
            // 记录scount的指定位置的字符出现次数
            sCount[s.charAt(i) - 'a'] ++;
        }
        // 若scount和pcount数组相等
        if(Arrays.equals(sCount,pCount))
            // 数组ans添加索引0
            ans.add(0);
        
        // 遍历s字符串
        for(int i = 0;i < slen - plen;i ++) {
            // scount字符 左移
            sCount[s.charAt(i) - 'a'] --;
            // scount字符 右移
            sCount[s.charAt(i + plen) - 'a'] ++;
            // 如果pcoutn和scount相等,ans添加索引i+1
            if(Arrays.equals(sCount,pCount))
                ans.add(i + 1);
        }
        // 返回ans数组
        return ans;
    }
}
