
279. 完全平方数
尝试过
中等
相关标签
相关企业
给你一个整数 n ，返回 和为 n 的完全平方数的最少数量 。

完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。



示例 1：

输入：n = 12
输出：3 
解释：12 = 4 + 4 + 4
示例 2：

输入：n = 13
输出：2
解释：13 = 4 + 9

class Solution {
    public int numSquares(int n) {
        // 定义一个dp数组，存放最少数量
        int[] dp = new int[n + 1];
        // 定义一个temp存三个x相加的特殊情况，初始为1
        int temp = 1;
        // 定义一个x存初始根，初始为0
        dp[0] = 0;
        // 从1开始遍历到n
        for(int i = 1;i <= n;i ++) {
            // 如果可以开根号，那么数组就存放该根号值，并且x赋值为根号
            if(isSquare(i)) {
                dp[i] = 1;
                dp[0] = i;
            } else if(i == (3 * temp)) { // 如果3*temp = i，那么数组存3，temp++
                dp[i] = 3;
                temp = (temp + 1) * (temp + 1);
            } else if(i == (2 * temp)) { // 如果3*temp = i，那么数组存3，temp++
                dp[i] = 2;
            } else { // 否则，dp[i] = dp[x] + dp[i - x];
                dp[i] = 1 + dp[i - dp[0]];
            }
        }
        // 返回dp值
        return dp[n];
    }
    public static boolean isSquare(int num) {
	double a = 0;
	try {
		a = Math.sqrt(num);	
    } catch (Exception e) {
		return false;
	}
	int b = (int) a;
	return a - b == 0;
    }
}


class Solution {
    public int numSquares(int n) {
       int[] dp = new int[n + 1];
       for(int i = 1;i <= n;i ++) {
           dp[i] = i;
           for(int j = 1;j * j <= i;j ++) {
               dp[i] = Math.min(dp[i],dp[i - j * j] + 1);
           }
       }
       return dp[n];
    }
}
