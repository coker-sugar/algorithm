139. 单词拆分
已解答
中等
相关标签
相关企业
给你一个字符串 s 和一个字符串列表 wordDict 作为字典。请你判断是否可以利用字典中出现的单词拼接出 s 。

注意：不要求字典中出现的单词全部都使用，并且字典中的单词可以重复使用。

 

示例 1：

输入: s = "leetcode", wordDict = ["leet", "code"]
输出: true
解释: 返回 true 因为 "leetcode" 可以由 "leet" 和 "code" 拼接成。
示例 2：

输入: s = "applepenapple", wordDict = ["apple", "pen"]
输出: true
解释: 返回 true 因为 "applepenapple" 可以由 "apple" "pen" "apple" 拼接成。
     注意，你可以重复使用字典中的单词。
示例 3：

输入: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
输出: false
  
class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        // 拿到字符串的长度
        int len  = s.length();
        // 定义一个dp数组
        boolean[] dp = new boolean[len + 1];
        // 置数组中的所有值为false
        Arrays.fill(dp,false);
        // 初始值为true
        dp[0] = true;
        // 开始遍历字符串
        for(int i = 0;i < len;i ++) {
            if(!dp[i])  continue;
            // 遍历字符串
            for(String dict: wordDict) {
                // 判断当前索引值的字符和当前单词的第一个值是否相等且 单词长度小于字符串长度
                if(dict.length() + i <= len && s.startsWith(dict,i)) {
                    dp[i + dict.length()] = true;
                }
            }   
        }
        return dp[len];
    }
}


class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        // 把wordDict转为一个hash表
        Set<String> worddict = new HashSet(wordDict);
        // 定义一个boolean数组表
        boolean[] dp = new boolean[s.length() + 1];
        // 使dp数组0处为true
        Arrays.fill(dp,false);
        dp[0] = true;
        // 从1开始遍历字符串
        for(int i = 1;i <= s.length();i ++) {
        // 从0到i处遍历字符串
            for(int j = 0;j < i;j ++) {
        // 若数组不为false并且hash表中包含从j到i的值
                if(dp[j] && worddict.contains(s.substring(j,i))) {
                    // 使得dp[i]为true,跳出循环
                    dp[i] = true;
                    break;
                }
            }
        }
        // 返回dp数组最后一个值
        return dp[s.length()];
    }
}
