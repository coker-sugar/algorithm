105. 从前序与中序遍历序列构造二叉树
已解答
中等
相关标签
相关企业
给定两个整数数组 preorder 和 inorder ，其中 preorder 是二叉树的先序遍历， inorder 是同一棵树的中序遍历，请构造二叉树并返回其根节点。

 

示例 1:


输入: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
输出: [3,9,20,null,null,15,7]
示例 2:

输入: preorder = [-1], inorder = [-1]
输出: [-1]
 

提示:

1 <= preorder.length <= 3000
inorder.length == preorder.length
-3000 <= preorder[i], inorder[i] <= 3000
preorder 和 inorder 均 无重复 元素
inorder 均出现在 preorder
preorder 保证 为二叉树的前序遍历序列
inorder 保证 为二叉树的中序遍历序列




// 1.先序数组的值从前往后一直是左子树的根，直到和中序数组的第index（初始值为0）个值相等为止，把它们全部压入栈中；
// 2.先序数组的其余值为栈中的值的右子树中的值，如何判断其余值是栈中哪个值的右子树的值呢？
// 3.出栈：只要中序数组中第index个值和栈顶的值相等，就出栈&&index++；直到不相等了就让最后一个出栈的值的右子树为先序数组中此刻的值
// 4.如此循环，返回root
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder == null || preorder.length == 0) return null;
        TreeNode root = new TreeNode(preorder[0]);
        Deque<TreeNode> stack = new LinkedList<TreeNode>();
        stack.push(root);
        int inorderIndex = 0;// 定义一个中序根的索引
        for(int i = 1;i < preorder.length;i ++) {
            int preorderVal = preorder[i];
            TreeNode node = stack.peek();
            if(node.val != inorder[inorderIndex]) {
                node.left = new TreeNode(preorderVal);
                stack.push(node.left);
            } else {
                while(!stack.isEmpty() && stack.peek().val == inorder[inorderIndex]) {
                    node = stack.pop();
                    inorderIndex ++;
                }
                node.right = new TreeNode(preorderVal);
                stack.push(node.right);
            }
        }
        return root;
    }   
}
