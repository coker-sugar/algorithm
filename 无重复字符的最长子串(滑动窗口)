3. 无重复字符的最长子串
中等
给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。

示例 1:
输入: s = "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。

示例 2:
输入: s = "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。

示例 3:
输入: s = "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。

class Solution {
    public int lengthOfLongestSubstring(String s) {
        // 思路:定义map存储空间,让字符作为索引,字符在字符串中的位置作为值;定义滑动窗口指针left;定义无重复字符串的最大长度maxlen;
        // 遍历字符串,i作为索引,如果遇到map空间中已经存储了当前遍历到的字符x,窗口指针left应该移动至map中字符x的下一个位置;        
        // 如果map中不存在当前遍历到的字符x,那么就把字符x加入到map中;如果map中存在当前遍历到的字符x,那么map中的x字符的值应该修改为i(删除原有的字符,添加新的字符);
        // 比较最大长度maxlen和 目前map的长度,实际上也就是(当前位置i - map的最左位置left + 1); 
        

        // 如果是空串，返回0
        if(s.length() == 0) return 0;
        // 定义map存储空间
        HashMap<Character,Integer> map = new HashMap<Character,Integer>();
        // 定义最大长度
        int MaxLen = 0;
        // 定义滑动窗口左指针   
        int left = 0;
        // 遍历s字符串
        for(int i = 0;i < s.length();i ++) {
            // 如果map中有当前字符
            if(map.containsKey(s.charAt(i))) {
                // 赋值left,让滑动窗口的指针left被赋值为 (map中当前字符索引的后一位)
                left = Math.max(left,map.get(s.charAt(i)) + 1);
            }
            // 如果map中已经存在当前字符,要把map中的对应字符的索引修改;如果map中不存在当前字符,要把当前字符加入到map中
            map.put(s.charAt(i),i);
            // 拿到最大字符串长度
            MaxLen = Math.max(MaxLen,i - left + 1);
        }
        // 返回最大长度
        return MaxLen;
    }
}
