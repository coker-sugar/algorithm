31. 下一个排列
已解答
中等
相关标签
相关企业
整数数组的一个 排列  就是将其所有成员以序列或线性顺序排列。

例如，arr = [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。
整数数组的 下一个排列 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 下一个排列 就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。


例如，arr = [1,2,3] 的下一个排列是 [1,3,2] 。
类似地，arr = [2,3,1] 的下一个排列是 [3,1,2] 。
而 arr = [3,2,1] 的下一个排列是 [1,2,3] ，因为 [3,2,1] 不存在一个字典序更大的排列。
给你一个整数数组 nums ，找出 nums 的下一个排列。

必须 原地 修改，只允许使用额外常数空间。
 

示例 1：

输入：nums = [1,2,3]
输出：[1,3,2]
示例 2：

输入：nums = [3,2,1]
输出：[1,2,3]
示例 3：

输入：nums = [1,1,5]
输出：[1,5,1]

12368 它的下一个序列 12386
1246987 它的下一个序列 1247689
125831 它的下一个序列 121358

一个数的下一个序列，就是比当前数稍微大一点的数
那么就要从后往前找，在大数里面找一个较小的数 和 小数（前面的某一个数比数组后面的一个数小，也就是打破了逆序的规律的那个数） 作交换，然后逆序后面的大数（此时后面的大数仍然是逆序）即可
思想：

1：从后往前找，找到前面一个值比当前值小的数，记录索引pos
如果索引没有被记录，说明没有找到，数组是一个完全倒序的，逆序一遍后退出程序
2：从后往前找，找到比nums[pos]大的数的索引，并交换二者的值
3：将索引pos之后的值逆序一遍即可



class Solution {
    public void nextPermutation(int[] nums) {
// 123465 为例：首先按照上一步（从后往前），交换 5（尽可能小的大数） 和 4（小数），得到 123564；然后需要将 5 之后的数重置为升序，得到 123546。显然 123546 比 123564 更小，123546 就是 123465 的下一个排列
        // 第一步：从后往前遍历，找到前一个值小于当前值的索引，记录前一个值索引pos
        int pos = -1;
        for(int i = nums.length - 1;i > 0;i --) {
            if(nums[i - 1] < nums[i]) {
                pos = i - 1;
                break;
            }
        }
        // 如果此时，没有找到，说明此时整个数组都是倒序，只需要排序一次就可以
        if(pos == -1) {
            // reverse(nums,0);
            Arrays.sort(nums);
            return ;
        }
        // 第二步，从后往前遍历，找到一个大于nums[pos]的值，并交换
        for(int i = nums.length - 1;i > pos;i --) {
            if(nums[i] > nums[pos]) {
                swap(nums,i,pos);
                break;
            }
        }
        // 第三步，将索引pos以后的数组排序
        reverse(nums,pos+1);
    }
    private void reverse(int[] nums,int pos) {
        for(int i = pos,j = nums.length - 1;i < j;i++,j--) {
            swap(nums,i,j);
        }
    }
    private void swap(int[] nums,int pos,int i) {
        int temp = nums[pos];
        nums[pos] = nums[i];
        nums[i] = temp;
    }
}
