## 双指针（快慢指针）
给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。
请注意 ，必须在不复制数组的情况下原地对数组进行操作。

示例 1:
输入: nums = [0,1,0,3,12]
输出: [1,3,12,0,0]

示例 2:
输入: nums = [0]
输出: [0]


方法一：暴力解法
var moveZeroes = function(nums) {
    for(let i = 0;i < nums.length; i ++) {
        if(nums[i] === 0) {
            for(let j = i; j < nums.length; j ++) {
                if(nums[j] !== 0) {
                    let con = nums[j]
                    nums[j] = nums[i];
                    nums[i] = con;
                    break;
                }
            }
        }
    }
    return nums;
};


方法二：去中间0，后面加0
var moveZeroes = function(nums) {
        let len = nums.length;
        for(let i =0;i<len;i++){
            if(nums[i]==0){
                nums.splice(i,1)
                nums.push(0)
                // 下面两个是我没有想到的，i直接--就行了，我还在判断；同时末尾是添加的0，没必要遍历，直接--就行。
                i--  //当为0的元素删除后，下一个元素就会前进一位占据该位置，所以要从该位置在进行判断
                len--  //当移动到末尾的元素，就不用再一次进行遍历了，所以遍历的长度要减去1位
            }
        }
        return nums
}

方法三：双指针
思路：快指针从前往后找，找到非0的就和慢指针处的值交换，并且慢指针向后移一位
var moveZeroes = function(nums) {
    let slowIndex = 0;
    for (let fastIndex = 0; fastIndex < nums.length; fastIndex++) {
        if (nums[fastIndex] !== 0) {
            [nums[slowIndex], nums[fastIndex]] = [nums[fastIndex], nums[slowIndex]]; // 无需临时变量的快速交换方法
            slowIndex++;
        }
    }
};







