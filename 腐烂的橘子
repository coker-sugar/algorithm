994. 腐烂的橘子
已解答
中等
相关标签
相关企业
在给定的 m x n 网格 grid 中，每个单元格可以有以下三个值之一：

值 0 代表空单元格；
值 1 代表新鲜橘子；
值 2 代表腐烂的橘子。
每分钟，腐烂的橘子 周围 4 个方向上相邻 的新鲜橘子都会腐烂。

返回 直到单元格中没有新鲜橘子为止所必须经过的最小分钟数。如果不可能，返回 -1 。

 

示例 1：



输入：grid = [[2,1,1],[1,1,0],[0,1,1]]
输出：4
示例 2：

输入：grid = [[2,1,1],[0,1,1],[1,0,1]]
输出：-1
解释：左下角的橘子（第 2 行， 第 0 列）永远不会腐烂，因为腐烂只会发生在 4 个方向上。
示例 3：

输入：grid = [[0,2]]
输出：0
解释：因为 0 分钟时已经没有新鲜橘子了，所以答案就是 0


class Solution {
    // 分三种状态：未搜索1、搜索过2、已遍历3
    // 把未搜索过的放入栈中
    // 记录新鲜橘子的个数，直到新鲜橘子为0，说明全部被感染
    int[] dx = {-1,1,0,0};
    int[] dy = {0,0,-1,1};
    public int orangesRotting(int[][] grid) {
        int fresh = 0;
        int step = 0;
        Queue<int[]> queue = new ArrayDeque<int[]>(); // 声明一个队列，队列内部存储的是数组类型
        for(int i = 0;i < grid.length;i ++) { // 获取新鲜橙子个数和坏橙子的位置
            for(int j = 0;j < grid[0].length;j ++) {
                if(grid[i][j] == 1) fresh++;
                if(grid[i][j] == 2) queue.offer(new int[]{i,j});
            }
        }
        while(fresh != 0 && !queue.isEmpty()) { // 遍历队列，每次遍历一次，就相当于感染一次；如果遇到新橘子，就加入到队列中；向四周感染的方式，遍历四次，x和y的位置由烂橘子的位置加上预先定义好的四个方位，之后进行判断即可
            int size = queue.size();
            step ++;
            for(int i = 0;i < size;i ++) {
               int[] cur = queue.poll();
                for(int k = 0;k < 4;k++) {
                    int x = cur[0] + dx[k];
                    int y = cur[1] + dy[k];
                    if(x>=0 && y>=0 && x<grid.length && y<grid[0].length && grid[x][y] == 1) {
                        grid[x][y] = 2;
                        queue.offer(new int[]{x,y});
                        fresh--;
                    }
                }
            }
        }
        return fresh > 0 ? -1 : step;
    }
}
