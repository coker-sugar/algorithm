763. 划分字母区间
已解答
中等
相关标签
相关企业
提示
给你一个字符串 s 。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。

注意，划分结果需要满足：将所有划分结果按顺序连接，得到的字符串仍然是 s 。



返回一个表示每个字符串片段的长度的列表。

示例 1：
输入：s = "ababcbacadefegdehijhklij"
输出：[9,7,8]
解释：
划分结果为 "ababcbaca"、"defegde"、"hijhklij" 。
每个字母最多出现在一个片段中。
像 "ababcbacadefegde", "hijhklij" 这样的划分是错误的，因为划分的片段数较少。 
示例 2：

输入：s = "eccbbbbdec"
输出：[10]


  class Solution {
    public List<Integer> partitionLabels(String s) {
        // 先遍历字符串，拿到每个字符最后一次出现的索引值
        // 那么一个片段中的end，必定是在某个字符结尾处 或者 及之后
        // 拿到最短的start和end（这里的字母不会在其它片段中出现），长度为end-start+1，加入返回数组中

        // 定义26位字母的数组记录字符最后出现的索引值
        int[] last = new int[26];
        // 拿到字符串的长度
        int len =  s.length();
        // 遍历字符串，把字符最后出现的索引值赋值给数组
        for(int i = 0;i < len;i ++) {
            last[s.charAt(i) - 'a'] = i;
        }
        // 定义list类型变量存储片段长度
        List<Integer> list = new ArrayList<Integer>();
        // 定义开头和结尾
        int start = 0,end = 0;
        // 遍历字符串
         for(int i = 0;i < len;i ++) {
            // 这里的结尾end，必定是max(end,last[s.charAt(i) - 'a'])
            end = Math.max(end,last[s.charAt(i) - 'a']);
            // 只要是end和i相等便符合条件，所有相同字母必定在这个end及以前
            if(end == i) {
                // list添加长度
                list.add(end - start + 1);
                // 开头在结尾的基础上往后挪一位
                start = end + 1;
            }
         }
        // 返回list
        return list;
    }
}
