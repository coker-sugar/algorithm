2. 两数相加
已解答
中等
相关标签
相关企业
给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。

请你将两个数相加，并以相同形式返回一个表示和的链表。

你可以假设除了数字 0 之外，这两个数都不会以 0 开头。

 

示例 1：


输入：l1 = [2,4,3], l2 = [5,6,4]
输出：[7,0,8]
解释：342 + 465 = 807.
示例 2：

输入：l1 = [0], l2 = [0]
输出：[0]
示例 3：

输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
输出：[8,9,9,9,0,0,0,1]


// 直接依次相加
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // 只需要相加得个数放在节点中,所以无需考虑*10的问题,只考虑进位问题
        // 如987 + 23: 实际上是 032 + 789;加当前值的时候,用一个变量记录进位的问题,9+2,存结点1,进位为1 ; 8+3为,存结点1+1(进位的1),存进位1 ; 7+0为,存结点7+1(进位的1,不存进位),故链表为 128;如果此时还有进位呢?那就再在前面加一个结点1
        ListNode pre = new ListNode(0);
        ListNode cur = pre; // 这里用cur去依次往后面遍历,当需要往链表中加入结点的时候,cur.next = newNode;cur = cur.next;
        int jin = 0;
        while(l1 != null || l2 != null) {
            int res1 = l1==null ? 0 : l1.val;
            int res2 = l2==null ? 0 : l2.val;
            int sum = res1 + res2 + jin;
            jin = sum / 10;
            sum = sum % 10;
            cur.next = new ListNode(sum);

            cur = cur.next;
            if(l1 != null) l1 = l1.next;
            if(l2 != null) l2 = l2.next;
        }
        if(jin == 1) {
            cur.next = new ListNode(1);
        }
        return pre.next;
    }
}

// 逆序链表
// 根据链表得到当前数字 sum1 = sum1 * 10 + val
// sum2 = sum2 * 10 + val
// 根据sum1 + sum2 得到结果result
// 将result赋给新的链表
// 将链表反转
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1 == null || l2 == null ) return null;
        ListNode cur1 = l1,cur2 = l2,pre1 = null,pre2 = null;
        while(cur1 != null) {
            ListNode temp1 = cur1.next;
            cur1.next = pre1;
            pre1 = cur1;
            cur1 = temp1;
        }
        while(cur2 != null) {
            ListNode temp2 = cur2.next;
            cur2.next = pre2;
            pre2 = cur2;
            cur2 = temp2;
        }
        int sum1 = 0,sum2 = 0;
        while(pre1 != null) {
            sum1 = sum1 * 10 + pre1.val;
            pre1 = pre1.next;
        }
        while(pre2 != null) {
            sum2 = sum2 * 10 + pre2.val;
            pre2 = pre2.next;
        }
        int sum = sum1 + sum2;
        ListNode res = null,tail = null;
        while(sum >= 0) {
            int temp = sum % 10;
            sum = sum / 10;
            ListNode newNode = new ListNode(temp);
            if(res == null) {
                res = newNode;
                tail = res;
                tail.next = null;
            } else {
                tail.next = newNode;
                tail = tail.next;
                tail.next = null;
            }
            if(sum == 0) break;
        }
        sum1 = 0;
        sum2 = 0;
        return res;
        
    }
}
